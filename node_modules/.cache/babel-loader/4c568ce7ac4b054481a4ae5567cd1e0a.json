{"ast":null,"code":"import addQuarters from \"../addQuarters/index.js\";\nimport startOfQuarter from \"../startOfQuarter/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachQuarterOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of quarters within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of quarters within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @returns {Date[]} the array with starts of quarters from the quarter of the interval start to the quarter of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\r\n * var result = eachQuarterOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * // ]\r\n */\n\nexport default function eachQuarterOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateQuarter = startOfQuarter(startDate);\n  var endDateQuarter = startOfQuarter(endDate);\n  endTime = endDateQuarter.getTime();\n  var quarters = [];\n  var currentQuarter = startDateQuarter;\n\n  while (currentQuarter.getTime() <= endTime) {\n    quarters.push(toDate(currentQuarter));\n    currentQuarter = addQuarters(currentQuarter, 1);\n  }\n\n  return quarters;\n}","map":{"version":3,"names":["addQuarters","startOfQuarter","toDate","requiredArgs","eachQuarterOfInterval","dirtyInterval","arguments","interval","startDate","start","endDate","end","endTime","getTime","RangeError","startDateQuarter","endDateQuarter","quarters","currentQuarter","push"],"sources":["D:/TLCN/pimtoolfont/node_modules/date-fns/esm/eachQuarterOfInterval/index.js"],"sourcesContent":["import addQuarters from \"../addQuarters/index.js\";\r\nimport startOfQuarter from \"../startOfQuarter/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name eachQuarterOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of quarters within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of quarters within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @returns {Date[]} the array with starts of quarters from the quarter of the interval start to the quarter of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\r\n * var result = eachQuarterOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * // ]\r\n */\r\n\r\nexport default function eachQuarterOfInterval(dirtyInterval) {\r\n  requiredArgs(1, arguments);\r\n  var interval = dirtyInterval || {};\r\n  var startDate = toDate(interval.start);\r\n  var endDate = toDate(interval.end);\r\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\r\n\r\n  if (!(startDate.getTime() <= endTime)) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  var startDateQuarter = startOfQuarter(startDate);\r\n  var endDateQuarter = startOfQuarter(endDate);\r\n  endTime = endDateQuarter.getTime();\r\n  var quarters = [];\r\n  var currentQuarter = startDateQuarter;\r\n\r\n  while (currentQuarter.getTime() <= endTime) {\r\n    quarters.push(toDate(currentQuarter));\r\n    currentQuarter = addQuarters(currentQuarter, 1);\r\n  }\r\n\r\n  return quarters;\r\n}"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,yBAAxB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,qBAAT,CAA+BC,aAA/B,EAA8C;EAC3DF,YAAY,CAAC,CAAD,EAAIG,SAAJ,CAAZ;EACA,IAAIC,QAAQ,GAAGF,aAAa,IAAI,EAAhC;EACA,IAAIG,SAAS,GAAGN,MAAM,CAACK,QAAQ,CAACE,KAAV,CAAtB;EACA,IAAIC,OAAO,GAAGR,MAAM,CAACK,QAAQ,CAACI,GAAV,CAApB;EACA,IAAIC,OAAO,GAAGF,OAAO,CAACG,OAAR,EAAd,CAL2D,CAK1B;;EAEjC,IAAI,EAAEL,SAAS,CAACK,OAAV,MAAuBD,OAAzB,CAAJ,EAAuC;IACrC,MAAM,IAAIE,UAAJ,CAAe,kBAAf,CAAN;EACD;;EAED,IAAIC,gBAAgB,GAAGd,cAAc,CAACO,SAAD,CAArC;EACA,IAAIQ,cAAc,GAAGf,cAAc,CAACS,OAAD,CAAnC;EACAE,OAAO,GAAGI,cAAc,CAACH,OAAf,EAAV;EACA,IAAII,QAAQ,GAAG,EAAf;EACA,IAAIC,cAAc,GAAGH,gBAArB;;EAEA,OAAOG,cAAc,CAACL,OAAf,MAA4BD,OAAnC,EAA4C;IAC1CK,QAAQ,CAACE,IAAT,CAAcjB,MAAM,CAACgB,cAAD,CAApB;IACAA,cAAc,GAAGlB,WAAW,CAACkB,cAAD,EAAiB,CAAjB,CAA5B;EACD;;EAED,OAAOD,QAAP;AACD"},"metadata":{},"sourceType":"module"}